Second Mini Program Spec

新增Note:
此次作業開始，請大家使用Makefile來自動編譯程式，
上傳也請附上Makefile，Makefile使用請自行上網學習，投影片會附上參考網站。

作業繳交期限為12/8(四) 23:59

繳交格式: <Student_ID>_<version>.zip
請務必壓縮成ZIP檔案，否則將不會接受此份作業，請勿使用RAR或7z等其他壓縮方式

Note1：請各位不要在bsd0~4或linux0~4等機器上撰寫、執行你的程式
Note2: 如果附檔pdf的demo與Spec有出入，請以Spec為準
Note3: 在"+ Specification +"部分提供產生亂數檔案的指令

Demo時間將會於之後公布
請記得在公布後來EC215填寫Demo時間，若沒有填寫Demo時間，將不予以Demo和計分，謝謝
-----------------------------------------------------------------------------------------------------

Note:(New!!)
From this homework, you must use Makefile to compile your codes.
And you need to upload your Makefile with your codes.
If you don't use Makefile, we will not let you demo your homework.
You need to learn how to use Makefile by yourself. The sample of Makefile will put in the slide.

Deadline is 12/8 Thu. 23:59

Hand-in format: <Student ID>_<version>.zip
You must zip your code, or we won’t accept your homework file. Do not use rar, 7z or others to compress your code.

Note1: Please do not write and run your programs on bsd0~4 or linux0~4
Note2: If there is difference between the slide and the Spec, you should follow the Spec.
Note3: Adding the command which generates a random file in the "+ Specification +" part

Demo will be announced later.
Please remember to select your demo time after we announce!
If your name doesn't exist on our demo form, you won’t be allowed to demo your homework.

-----------------------------------------------------------------------------------------------------

Homework2 UDP Reliable File Transfer

+ Overview +

In this homework, you need to implement a UDP reliable file transfer protocol
on application-level with 3 different timeout mechanism.


+ Specification +

The UDP reliable file transfer protocol includes a sender and a receiver.
Sender keeps sending the content of a file to the receiver.
Receiver keeps receiving the packets from sender and output to another file.
To cope with the packet loss and re-ordering in the network, sender and receiver 
should detect the packet loss event and re-ordering event (by using the timeout method) 
and deal with it (re-transmit the packet).

You should hand-in 6 different codes, 3 different timeout methods.
And you also need to hand-in your Makefile to compile these codes.

1. Timeout using SIGALRM   (30%)
2. Timeout using select       (30%)
3. Timeout using setsockopt (30%)
4. Makefile        (10%)
5. Performance                 (+20%)

Note1: The receiver should NOT read the specific file locally.
Note2: For SIGALRM timeout method, you may need to use siginterrupt to allow SIGALRM signal
          to interrupt a system call.
Note3: The command to generate a random file with a specified size
          > dd if=/dev/urandom of=<Output File Name> bs=<File Size> count=1
          For example, the following command generate a file named "a_big_file" with file size=5MB
          > dd if=/dev/urandom of=a_big_file bs=5MB count=1


+ Environment +

To test your programs, you need to simulate the network scenario (packet loss rate and packet re-ordering),
and check if the file received is no different from the input after the file transfer.

Note: You should NOT run your programs on the workstation (i.e. npbsd, nplinux, bsd, and linux).
         Instead, you do that on your own PC.

** Simulate Network Scenario **

Use tool 'tc' to simulate packet loss.
'tc' is a program to control the traffic in kernel.
With this tool, you can set network parameters on a NIC.

-- Add a rule which setting the packet loss rate and packet re-ording.
   Usage: sudo tc qdisc add dev <Device> root netem loss <Packet Loss Rate> delay <Delay time> <Variation> distribution normal

   For example, you can add a rule to set the packet loss rate with '5%', delay time with 7ms~13ms on the device 'lo'.
   > sudo tc qdisc add dev lo root netem loss 5% delay 10ms 3ms distribution normal

-- Delete all rules on a device
   Usage: sudo tc qdisc del dev <Device> root
   
   For example, you can delete all rules setting on the device 'lo'.
   > sudo tc qdisc del dev lo root

Note: If there is an error such that "RTNETLINK answers: File exists" when you
        add a rule, try to delete all rules first.

** Check Correctness **

Use tool 'diff' to check if the file transfer is correct.
Usage: diff <File 1> <File 2>

For example, you can check if the file 'a_file' is equal to 'b_file'.
> diff a_file b_file

If there is no message outputing on the screen, then a_file is equal to b_file, or 
it shows the difference between a_file and b_file.


+ Due Date +

2016/12/8 23:59

Please zip your source code and upload it to e3.
You must zip your code, or we won’t accept your homework file.
Do not use rar, 7z or others to compress your code.

Hand-in format: <Student ID>_<Version>.zip


+ Demo +

Packet loss rate: around 5%
Delay time: 15 ~ 25 ms
File size: smaller than 5MB
[/code]